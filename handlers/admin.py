from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command

router = Router()

ADMIN_ID = int(os.getenv("ADMIN_ID"))

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
# –° user_id, —á—Ç–æ–±—ã –±—ã–ª–æ –≤–æ–∑–º–æ–∂–Ω–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
pending_applications = {}

@router.message(Command("admin"))
async def admin_panel(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
    if not pending_applications:
        await message.answer("üìù –ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫.")
        return

    applications = "\n".join([f"üìã {user_id} - {data['name']} ({data['gender']}, {data['age']} –ª–µ—Ç)" for user_id, data in pending_applications.items()])
    await message.answer(f"üìù –ó–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:\n{applications}")

@router.message(Command("approve"))
async def approve_application(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    if message.text.startswith("/approve"):
        user_id = message.text.split()[1] if len(message.text.split()) > 1 else None

        if user_id and int(user_id) in pending_applications:
            # –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            application = pending_applications.pop(int(user_id))
            await message.answer(f"‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç {application['name']} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–µ–≤—É—à–∫–µ, —á—Ç–æ –µ—ë –∑–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
            await message.bot.send_message(int(user_id), "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")
        else:
            await message.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ ID —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ.")

@router.message(Command("reject"))
async def reject_application(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    if message.text.startswith("/reject"):
        user_id = message.text.split()[1] if len(message.text.split()) > 1 else None

        if user_id and int(user_id) in pending_applications:
            # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
            application = pending_applications.pop(int(user_id))
            await message.answer(f"‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç {application['name']} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–µ–≤—É—à–∫–µ, —á—Ç–æ –µ—ë –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞
            await message.bot.send_message(int(user_id), "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")
        else:
            await message.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ ID —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ.")
