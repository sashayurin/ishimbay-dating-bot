from aiogram import Router, F
from aiogram.types import Message, LabeledPrice, PreCheckoutQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import os

router = Router()

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
ADMIN_ID = int(os.getenv("ADMIN_ID"))
PAYMENT_PROVIDER_TOKEN = os.getenv("PAYMENT_PROVIDER_TOKEN")
PRICE_RUB = int(os.getenv("PRICE_RUB", 149))

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
# –° user_id, —á—Ç–æ–±—ã –±—ã–ª–æ –≤–æ–∑–º–æ–∂–Ω–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
pending_applications = {}

class RegisterForm(StatesGroup):
    name = State()
    age = State()
    gender = State()
    photo = State()

@router.message(Command("start"))
async def start(message: Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –Æ–°–ë (–Æ–∂–Ω—ã–µ —Å–µ—Ä–¥—Ü–∞ –ë–∞—à–∫–∏—Ä–∏–∏) –¥–ª—è —Ç–∞–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ –∫–∞–∫: –°—Ç–µ—Ä–ª–∏—Ç–∞–º–∞–∫, –°–∞–ª–∞–≤–∞—Ç, –ò—à–∏–º–±–∞–π, –ú–µ–ª–µ—É–∑, –ö—É–º–µ—Ä—Ç–∞—É –∏ –¥—Ä. üíå\n"
                         "–î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É.\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    await state.set_state(RegisterForm.name)

@router.message(StateFilter(RegisterForm.name))
async def process_name(message: Message, state: FSMContext):
    name = message.text.strip()
    if len(name) < 2:
        await message.answer("–ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –ø–æ–ª–Ω–æ–µ –∏–º—è.")
        return
    await state.update_data(name=name)
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    await state.set_state(RegisterForm.age)

@router.message(StateFilter(RegisterForm.age))
async def process_age(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        return
    await state.update_data(age=int(message.text))
    await message.answer("–¢—ã –ø–∞—Ä–µ–Ω—å –∏–ª–∏ –¥–µ–≤—É—à–∫–∞?")
    await state.set_state(RegisterForm.gender)

@router.message(StateFilter(RegisterForm.gender))
async def process_gender(message: Message, state: FSMContext):
    gender_input = message.text.strip().lower()

    if gender_input in ["–ø–∞—Ä–µ–Ω—å", "–º—É–∂—á–∏–Ω–∞"]:
        gender = "–ü–∞—Ä–µ–Ω—å"
    elif gender_input in ["–¥–µ–≤—É—à–∫–∞", "–∂–µ–Ω—â–∏–Ω–∞"]:
        gender = "–î–µ–≤—É—à–∫–∞"
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ '–ø–∞—Ä–µ–Ω—å' –∏–ª–∏ '–¥–µ–≤—É—à–∫–∞'.")
        return

    await state.update_data(gender=gender)
    await message.answer("–ü—Ä–∏—à–ª–∏ —Å–≤–æ—ë —Ñ–æ—Ç–æ.")
    await state.set_state(RegisterForm.photo)

@router.message(StateFilter(RegisterForm.photo), F.photo)
async def process_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    photo_id = message.photo[-1].file_id
    name = data["name"]
    age = data["age"]
    gender = data["gender"]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –≤ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç—ã
    user_id = message.from_user.id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    await state.update_data(photo_id=photo_id)

    caption = f"<b>–ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞</b>\n\n–ò–º—è: {name}\n–í–æ–∑—Ä–∞—Å—Ç: {age}\n–ü–æ–ª: {gender}\n\n–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö
    pending_applications[user_id] = {
        "name": name,
        "age": age,
        "gender": gender,
        "photo_id": photo_id,
        "user_id": user_id
    }

    # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_profile_link = f"https://t.me/{user_id}"

    if gender == "–î–µ–≤—É—à–∫–∞":
        await message.answer(
            f"üé• –û—Ç–ª–∏—á–Ω–æ, –≤—Ö–æ–¥ –¥–ª—è –¥–µ–≤—É—à–µ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, –Ω–æ –Ω–∞–º –Ω—É–∂–Ω–æ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Ç—ã –Ω–µ —Ñ–µ–π–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ (–∫—Ä—É–∂–æ–∫), –≥–¥–µ —Ç–≤–æ–µ –ª–∏—Ü–æ –æ—Ç—á–µ—Ç–ª–∏–≤–æ –≤–∏–¥–Ω–æ, —Ç—ã –≥–æ–≤–æ—Ä–∏—à—å —Å–≤–æ—ë –∏–º—è –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: <code>{user_id}</code>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å –µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É –í–∞–ª–µ—Ä–∏–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, —á—Ç–æ —Ç—ã —Ä–µ–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫:\nüëâ https://t.me/valeria_smm_manager"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω—É —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å
        await message.bot.send_photo(ADMIN_ID, photo=photo_id, caption=caption)
        await message.bot.send_message(ADMIN_ID, f"üìã –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞\n–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_profile_link}")
        await message.answer("–ê–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å –∫—Ä—É–∂–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚úÖ")
        await state.clear()
        return

    # –î–ª—è –ø–∞—Ä–Ω–µ–π ‚Äî –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É
    if gender == "–ü–∞—Ä–µ–Ω—å":
        prices = [LabeledPrice(label="–î–æ—Å—Ç—É–ø –∫ –∞–Ω–∫–µ—Ç–µ", amount=PRICE_RUB * 100)]

        if not PAYMENT_PROVIDER_TOKEN:
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ø–ª–∞—Ç–µ–∂–Ω—ã–π —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
        await message.answer_invoice(
            title="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
            description="–û–ø–ª–∞—Ç–∞ –∑–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –≤ —Å–µ—Ä–≤–∏—Å–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤",
            provider_token=PAYMENT_PROVIDER_TOKEN,
            currency="RUB",
            prices=prices,
            payload="registration_payment"
        )

        await state.update_data(photo_id=photo_id)  # –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º state –¥–æ –æ–ø–ª–∞—Ç—ã!

@router.pre_checkout_query()
async def process_pre_checkout(pre_checkout_query: PreCheckoutQuery):
    await pre_checkout_query.answer(ok=True)

@router.message(F.successful_payment)
async def on_successful_payment(message: Message, state: FSMContext):
    data = await state.get_data()
    name = data.get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    age = data.get("age", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    gender = data.get("gender", "–ü–∞—Ä–µ–Ω—å")
    photo_id = data.get("photo_id")

    caption = f"<b>–ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞</b>\n\n–ò–º—è: {name}\n–í–æ–∑—Ä–∞—Å—Ç: {age}\n–ü–æ–ª: {gender}\n\n‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"

    if photo_id:
        await message.bot.send_photo(ADMIN_ID, photo=photo_id, caption=caption)
    else:
        await message.bot.send_message(ADMIN_ID, caption)

    await message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")
    await state.clear()
